import { v1 as uuidv1 } from "uuid"
import consumer from "./consumer"

var faker = require("faker");
var random = require("random");

var statusCodes = ["0", "1", "2", "3", "4", "5", "6"];

// All ZIP codes extracted from kyzipdetails.csv.
var zipCodes = ["42201", "42202", "41201", "42120", "42602", "41001", "41601",
"42204", "42020", "42603", "42122", "40402", "41121", "40902", "42021", "40903",
"41712", "41512", "40803", "41101", "41102", "41105", "41114", "42206", "41002",
"42123", "41602", "41713", "40003", "42022", "41603", "40906", "40004", "42023",
"42024", "40104", "40806", "41714", "41311", "42124", "41203", "41604", "42320",
"40006", "42207", "42321", "42322", "42323", "41513", "41514", "41073", "42324",
"40807", "42025", "40403", "40404", "41003", "42516", "40007", "41605", "40913",
"41606", "42712", "40914", "40808", "40405", "40915", "41804", "41124", "40810",
"40008", "41607", "42027", "42713", "41719", "41314", "41204", "40107", "42101",
"42102", "42103", "42104", "40009", "40108", "42715", "42325", "40409", "42518",
"40109", "41004", "42210", "40921", "40410", "41721", "40010", "42716", "41722",
"41517", "40310", "42717", "41005", "42028", "42519", "41723", "41006", "41612",
"42211", "42327", "41007", "42029", "40813", "40011", "42718", "42719", "41301",
"41519", "42721", "42722", "40923", "40311", "41725", "41008", "41128", "41129",
"42127", "40815", "42724", "42214", "42328", "42330", "42215", "40012", "41727",
"42726", "42404", "40312", "41317", "40313", "42332", "40110", "42216", "42031",
"40927", "40111", "40819", "42728", "42032", "41729", "40701", "40702", "41010",
"41731", "42406", "41011", "41012", "41014", "41016", "41019", "40013", "40419",
"40820", "42033", "40014", "41030", "41413", "42217", "41810", "42333", "42729",
"40823", "42035", "40115", "41031", "41615", "40422", "40423", "41616", "42408",
"40824", "41074", "41033", "41812", "41214", "41735", "41859", "40316", "42036",
"42409", "41520", "41034", "42337", "41619", "41035", "42219", "42338", "42339",
"42528", "41621", "41739", "42410", "40729", "41216", "41622", "42732", "40018",
"42038", "42129", "42130", "40117", "42701", "42702", "41037", "42733", "41522",
"42220", "41135", "40019", "41740", "40826", "41018", "41025", "41815", "40827",
"42131", "42567", "40828", "41039", "41425", "40118", "40020", "42221", "40932",
"40119", "41040", "42039", "40319", "42040", "41524", "42533", "40022", "40023",
"41743", "40935", "41219", "41139", "41041", "41022", "41042", "42343", "41527",
"42223", "40121", "40122", "41075", "41043", "42133", "40939", "40940", "40601",
"40602", "40603", "40604", "40621", "42134", "42135", "42411", "41528", "40322",
"41017", "42041", "42140", "40140", "41817", "40941", "41630", "41141", "41745",
"40324", "41044", "41045", "42044", "40943", "42141", "42142", "41046", "42740",
"42741", "40025", "41819", "40026", "42232", "42344", "41142", "42045", "40328",
"40734", "40434", "40829", "41143", "40946", "42743", "41144", "42345", "41631",
"40830", "41632", "40142", "42234", "41222", "41821", "42047", "42413", "41746",
"42048", "40143", "41531", "42746", "40831", "40144", "41635", "40027", "40330",
"42347", "42348", "41701", "41702", "42049", "41332", "41048", "40949", "41534",
"40840", "42419", "42420", "42236", "42151", "41636", "42050", "42051", "41049",
"40129", "40951", "41822", "40953", "42152", "41146", "42748", "42153", "40843",
"40334", "42240", "42241", "42349", "42749", "40844", "41535", "40145", "41640",
"40845", "40437", "41749", "41051", "41224", "40955", "40336", "40146", "42350",
"41824", "41149", "41642", "41339", "42629", "41751", "40337", "41537", "41826",
"41538", "41052", "40440", "41226", "40737", "40339", "41053", "40847", "42053",
"41539", "40442", "42054", "41828", "42753", "42154", "41754", "42055", "42056",
"40031", "40032", "41643", "40444", "41645", "41015", "40342", "40033", "40150",
"41831", "42058", "42754", "42755", "42256", "42351", "40502", "40503", "40504",
"40505", "40506", "40507", "40508", "40509", "40510", "40511", "40512", "40513",
"40514", "40515", "40516", "40517", "40522", "40523", "40524", "40526", "40533",
"40536", "40544", "40546", "40550", "40555", "40575", "40577", "40578", "40579",
"40580", "40581", "40582", "40583", "40588", "40591", "42539", "40740", "41833",
"41834", "42352", "40445", "40036", "40741", "40742", "40743", "40744", "41347",
"41542", "40037", "41348", "41230", "40201", "40202", "40203", "40204", "40205",
"40206", "40207", "40208", "40209", "40210", "40211", "40212", "40213", "40214",
"40215", "40216", "40217", "40218", "40219", "40220", "40221", "40222", "40223",
"40224", "40225", "40228", "40229", "40231", "40232", "40233", "40241", "40242",
"40243", "40245", "40250", "40251", "40252", "40253", "40255", "40256", "40257",
"40258", "40259", "40261", "40266", "40268", "40269", "40270", "40272", "40280",
"40289", "40291", "40292", "40295", "40297", "40298", "40299", "42060", "41231",
"42061", "41232", "40854", "42156", "40855", "42355", "40040", "42431", "42757",
"41836", "41451", "42259", "40962", "42436", "42758", "42356", "42064", "42759",
"42631", "41159", "41649", "40964", "40041", "42066", "41837", "41055", "41056",
"41543", "41544", "40152", "41647", "42354", "40447", "40448", "40153", "41234",
"40346", "42069", "41059", "41650", "42541", "40965", "40347", "42070", "40348",
"42762", "40045", "41651", "40856", "41352", "42633", "40351", "42437", "42261",
"41063", "42440", "40046", "42157", "41064", "42764", "40353", "40456", "40047",
"41839", "41548", "40155", "42765", "42071", "41065", "41549", "42544", "40048",
"42441", "41840", "40049", "40050", "42076", "40051", "40052", "40355", "41071",
"41072", "41076", "41099", "40340", "40356", "40357", "42442", "42262", "42159",
"41238", "42361", "41164", "42265", "40358", "40972", "40460", "42301", "42302",
"42303", "42304", "40359", "40360", "42001", "42002", "42003", "40461", "41240",
"40361", "40362", "42160", "42634", "40464", "40862", "40863", "40157", "42266",
"40055", "40363", "40468", "41080", "40056", "41553", "42366", "41554", "41501",
"41502", "41250", "42635", "41360", "41843", "40977", "41844", "40755", "40057",
"41081", "42444", "40058", "42367", "41845", "40366", "41653", "42445", "41655",
"40059", "42450", "40865", "41166", "41557", "40159", "40160", "41558", "41861",
"40472", "40060", "41847", "42451", "41559", "40473", "42638", "42368", "40161",
"40475", "40476", "40162", "41254", "40979", "42452", "41560", "42273", "42274",
"40759", "41561", "42369", "42163", "42275", "41366", "41848", "41464", "42371",
"41168", "41169", "42642", "42276", "42372", "40370", "40061", "42453", "40062",
"40063", "42078", "40371", "40372", "41465", "41083", "40481", "41171", "41759",
"42553", "42164", "41760", "42455", "42079", "40983", "42280", "40374", "41562",
"41563", "40065", "40066", "40165", "41564", "40763", "41085", "40067", "41255",
"40376", "42456", "41763", "42457", "40068", "42081", "42171", "41173", "42501",
"42502", "42503", "42776", "42374", "41174", "41175", "41503", "41086", "42458",
"40069", "41256", "41257", "40379", "40484", "40380", "41659", "42647", "41566",
"40170", "40868", "41567", "40988", "41568", "42649", "42459", "42460", "40070",
"42166", "42782", "42285", "42082", "42558", "40071", "41260", "41855", "41766",
"42083", "41189", "41262", "42167", "41862", "40870", "41663", "42286", "40075",
"41263", "40486", "41264", "41091", "40171", "42461", "42784", "42376", "41265",
"41179", "41385", "41571", "41092", "40383", "40384", "41772", "41773", "41386",
"40175", "41774", "41572", "40385", "40076", "41093", "40873", "41094", "41267",
"41095", "41096", "42085", "42462", "41666", "40489", "41180", "40176", "41667",
"40387", "41472", "42086", "40177", "42564", "41268", "40077", "40178", "42463",
"41669", "41390", "42788", "42464", "41858", "42378", "42653", "42087", "41181",
"40769", "41271", "41097", "40078", "40390", "40391", "40392", "42565", "42088",
"41274", "40771", "42170", "41776", "41183", "41098", "41477", "41777", "42566",
"41397"];

function postLog(message) {
    $("#log").prepend(`<p><strong>${Date()}</strong>: ${message}</p>`);
}

function makePatient() {
    return {
        "first_name": faker.name.firstName(),
        "last_name": faker.name.lastName(),
        "mrn": uuidv1(),
        "zip_code": zipCodes[random.int(0, zipCodes.length - 1)],
        "patient_status_code": statusCodes[random.int(0, statusCodes.length - 1)]
    };
}

function getPayload(messagesCount) {
    var messages = [];
    for (var i = 0; i < messagesCount; i++) {
        messages.push(makePatient());
    }
    return messages;
}

$(document).on("turbolinks:load", () => {
    consumer.patientChannel = consumer.subscriptions.create("PatientChannel", {
        connected() {
            // Called when the subscription is ready for use on the server
            postLog("Client has connected to the server patient channel.");
        },
        disconnected() {
            // Called when the subscription has been terminated by the server
            postLog("Client has disconnected to the server patient channel.");
        },
        received(data) {
            // Called when there's incoming data on the websocket for this channel
        },
        insertPatients(patients) {
            this.perform("insert_patients", { patients: patients });
        }
    });
    setInterval(() => {
        if ($("#on-off-button").text() === "Stop sending messages") {
            var min = Number($("#min-patients").val());
            var max = Number($("#max-patients").val());
            var n = random.int(min, max);
            var payload = getPayload(n);
            consumer.patientChannel.insertPatients(payload);
            postLog(`Sent payload of ${n} patients.`);
            if ($("#log-payload-contents").prop("checked")) {
                postLog(JSON.stringify(payload));
            }
        }
    }, Number($("#rate").val()) * 1000);
});

$(document).on("click", "#on-off-button", (event) => {
    if ($("#on-off-button").text() === "Start sending messages") {
        $("#on-off-button").text("Stop sending messages");
    }
    else {
        $("#on-off-button").text("Start sending messages");
    }
});
